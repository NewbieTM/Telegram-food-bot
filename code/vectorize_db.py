from langchain_huggingface import HuggingFaceEmbeddings
import argparse
import os
import shutil
from langchain_community.document_loaders import TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document
from langchain_community.vectorstores import Chroma


def get_embedding_function():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ HuggingFace.
    """
    embeddings = HuggingFaceEmbeddings(model_name="sberbank-ai/sbert_large_nlu_ru")
    return embeddings


def load_documents():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
    –í–∞—Ä–∏–∞–Ω—Ç 1: –ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏).
    –í–∞—Ä–∏–∞–Ω—Ç 2: –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ —á–∞–Ω–∫–∏.
    –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.
    """
    if not os.path.exists(DATA_PATH):
        raise FileNotFoundError(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {DATA_PATH}")

    document_loader = TextLoader(DATA_PATH, encoding="utf-8")
    documents = document_loader.load()

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    split_docs = []
    for doc in documents:
        lines = doc.page_content.split('\n')
        for line in lines:
            line = line.strip()
            if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                split_docs.append(Document(page_content=line))
    return split_docs

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –æ–¥–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
    # content = "\n".join([doc.page_content for doc in documents])
    # return [Document(page_content=content)]


def split_documents(documents: list[Document]):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=300,
        chunk_overlap=40,
        length_function=len,
        # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å is_separator_regex=False –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    )
    return text_splitter.split_documents(documents)


def add_to_chroma(chunks: list[Document]):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Chroma –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë.
    """
    embeddings = get_embedding_function()
    db = Chroma.from_documents(
        documents=chunks,
        embedding=embeddings,
        persist_directory=CHROMA_PATH
    )
    db.persist()
    print(f"‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {CHROMA_PATH}.")


def clear_database():
    """
    –û—á–∏—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Chroma.
    """
    if os.path.exists(CHROMA_PATH):
        shutil.rmtree(CHROMA_PATH)
        print(f"üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏ {CHROMA_PATH} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        print(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏ {CHROMA_PATH} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


CHROMA_PATH = "../db/chroma"
DATA_PATH = "../db/data.txt"


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    parser = argparse.ArgumentParser(description="–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    parser.add_argument("--reset", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º.")
    args = parser.parse_args()

    if args.reset:
        print("‚ú® –û—á–∏—â–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        clear_database()

    print("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    documents = load_documents()
    print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")

    print("‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —á–∞–Ω–∫–∏...")
    chunks = split_documents(documents)
    print(f"üîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {len(chunks)}")

    print("üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ Chroma –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    add_to_chroma(chunks)
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")


if __name__ == "__main__":
    main()